generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String(240)
  access_token      String? @db.String(240)
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String(240)
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Posts         Posts[]
  Comments Comments[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id         String   @id @default(cuid())
  category   String   @db.String(50)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Posts      Posts[]
}

model Posts {
  id         String   @id @default(cuid())
  title      String
  subtitle   String
  content    String
  color      String
  image      String
  categoryId String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  create_at  DateTime @default(now())
  updated_at DateTime @updatedAt
  comments Comments[]
}

model Comments {
  id String @id @default(cuid())
  content String
  postId String
  userId String
  parentId String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Posts @relation(fields: [postId], references: [id], onDelete:Cascade)
  comment Comments? @relation("Comments",fields: [parentId], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  children Comments[] @relation("Comments")

}